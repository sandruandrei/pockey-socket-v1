{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["namespace Framework {\r\n    export module Connection {\r\n        export class FrameworkSocketNamespaces {\r\n            public static SEARCH: string = \"/searching\";\r\n            public static PLAY: string = \"/play\";\r\n        }\r\n\r\n        export class FrameworkSocketEvents {\r\n\r\n            public static newConnection: string = \"FrameworkSocketEvents\" + \"newConnection\";\r\n            public static letsConnect: string = \"FrameworkSocketEvents\" + \"letsConnect\";\r\n            public static joinRoom: string = \"FrameworkSocketEvents\" + \"joinRoom\";\r\n            public static joinedRoom: string = \"FrameworkSocketEvents\" + \"joinedRoom\";\r\n            public static leftRoom: string = \"FrameworkSocketEvents\" + \"leftRoom\";\r\n            public static privateMessage: string = \"FrameworkSocketEvents\" + \"privateMessage\";\r\n            public static getUserFromDatabase: string = \"FrameworkSocketEvents\" + \"getUserFromDatabase\";\r\n            public static updateUserData: string = \"FrameworkSocketEvents\" + \"updateUserData\";\r\n            public static disconnectMySocket: string = \"FrameworkSocketEvents\" + \"disconnectMySocket\";\r\n            // public static partnerFoundChannel: string = \"partnerFoundChannel\";\r\n        }\r\n\r\n        export class FrameworkSocketMessages {\r\n            public static WHO_WANTS_TO_PLAY: string = \"FrameworkSocketMessages.\" + \"WHO_WANTS_TO_PLAY\";\r\n            public static I_WANT_TO_PLAY: string = \"FrameworkSocketMessages.\" + \"I_WANTS_TO_PLAY\";\r\n            public static HELLO: string = \"FrameworkSocketMessages.\" + \"HELLO\";\r\n\r\n        }\r\n    }\r\n}\n///@ts-ignore\r\nimport nodeStatic    = require( 'node-static' );\r\n//@ts-ignore\r\nimport http            = require( \"http\" );\r\n//@ts-ignore\r\nimport socketIO        = require( 'socket.io' );\r\n//@ts-ignore\r\nimport express        = require( 'express' );\r\n//@ts-ignore\r\nimport pg        = require( 'pg' );\r\n\r\n\r\nexport module PockeyServer {\r\n\r\n    //@ts-ignore\r\n    import FrameworkSocketNamespaces = Framework.Connection.FrameworkSocketNamespaces;\r\n    //@ts-ignore\r\n    import FrameworkSocketMessages = Framework.Connection.FrameworkSocketMessages;\r\n    //@ts-ignore\r\n    import FrameworkSocketEvents = Framework.Connection.FrameworkSocketEvents;\r\n\r\n    export class Server {\r\n        protected file;\r\n        protected httpServer;\r\n        protected socketIo;\r\n        protected socketIsFree: boolean = true;\r\n        protected databaseConnected: boolean = false;\r\n        protected databasePool: pg.Pool;\r\n\r\n        // protected lookingForPartner: boolean = true;\r\n\r\n        constructor() {\r\n            this.databasePool = new pg.Pool({\r\n                user: 'npvswhggxgsgxk',\r\n                host: 'ec2-54-225-98-131.compute-1.amazonaws.com',\r\n                database: 'd1uk2vnpdjl28q',\r\n                password: '556e5013ea1dec59d2daa5d7bff223ec028c16da4ac577db94e78dbc75471965',\r\n                port: 5432,\r\n                ssl: true\r\n            });\r\n\r\n\r\n            this.databasePool.on('error', (err, client) => {\r\n                console.error('Unexpected error on idle client', err);\r\n                process.exit(-1);\r\n            });\r\n\r\n            console.log(\"bla\");\r\n\r\n            this.databasePool.connect((err, client, done) => {\r\n                if (err) {\r\n                    throw err;\r\n                }\r\n                else {\r\n                    console.log(\"s-a logat, merge.\");\r\n                    this.databaseConnected = true;\r\n                }\r\n            });\r\n\r\n            ////////////////////////////////\r\n            // const app = express();\r\n\r\n            this.file = new nodeStatic.Server('out', { // bin is the folder containing our html, etc\r\n                cache: 0,\t// don't cache\r\n                gzip: true\t// gzip our assets\r\n            });\r\n\r\n            let port = process.env.PORT || 8080;\r\n            // create our server\r\n            this.httpServer = http.createServer((request, response) => {\r\n                request.addListener('end', () => {\r\n                    this.file.serve(request, response);\r\n                });\r\n                request.resume();\r\n            });\r\n\r\n            // var http=require('http');\r\n\r\n            // var server=http.createServer(function(req,res){\r\n            //     res.end('test');\r\n            // });\r\n\r\n            this.httpServer.on('listening', function () {\r\n                console.log('ok, server is running');\r\n            });\r\n\r\n            this.httpServer.listen(port, '0.0.0.0');\r\n\r\n            this.socketIo = socketIO();\r\n            // console.log(\"socket id: \" + this.socketIo.id);\r\n            this.socketIo.serveClient(true); // the server will serve the client js file\r\n            this.socketIo.attach(this.httpServer);\r\n\r\n            let connectCounter: number = 0;\r\n\r\n            this.socketIo.on('connection', (socket) => {\r\n\r\n                connectCounter++;\r\n                console.log('a user connected. users connected: ' + connectCounter);\r\n                //todo aici trebuie sa te ocupi de disconnect dar si pe celalalte socketuri\r\n\r\n                socket.on(FrameworkSocketEvents.getUserFromDatabase, (username) => {\r\n                    console.log('someone wants some db in');\r\n                    if (this.databaseConnected) {\r\n                        this.checkForUserID(socket, username);\r\n                    }\r\n                });\r\n                socket.on(FrameworkSocketEvents.updateUserData, (data) => {\r\n                    if (this.databaseConnected) {\r\n                        this.updateUserDb(socket, data);\r\n                    }\r\n                });\r\n            });\r\n            this.socketIo.on('disconnect', function () {\r\n                // console.log('user disconnected');\r\n                connectCounter--;\r\n                console.log('a user left. users connected: ' + connectCounter);\r\n            });\r\n            // this.socketIo.on('disconnect', (socket) => {\r\n            //\r\n            // });\r\n            let lookingForPartnerNamespace = this.socketIo.of(FrameworkSocketNamespaces.SEARCH);\r\n            lookingForPartnerNamespace.on('connection', function (socket) {\r\n                let id: string = socket.id.toString().replace(FrameworkSocketNamespaces.SEARCH, '');\r\n                console.log(FrameworkSocketNamespaces.SEARCH + ' -> someone connected: ' + id);\r\n\r\n                socket.on(FrameworkSocketEvents.letsConnect, (msg, id, partnerID) => {\r\n                    socket.broadcast.emit(FrameworkSocketEvents.letsConnect, msg, id, partnerID);\r\n                    // socket.emit(FrameworkSocketEvents.letsConnect, msg, id, partnerID);\r\n                    // console.log(\"partnerNamespaceID, socket: \" +partnerNamespaceID, socket);\r\n                });\r\n\r\n                // socket.on('disconnect', () => {\r\n                //     socket.disconnect();\r\n                //     // socket.broadcast.emit(Framewor\r\n                //     // kSocketEvents.letsConnect, msg, id, partnerID);\r\n                //     // socket.emit(FrameworkSocketEvents.letsConnect, msg, id, partnerID);\r\n                //     // console.log(\"partnerNamespaceID, socket: \" +partnerNamespaceID, socket);\r\n                // });\r\n                // socket.emit(FrameworkSocketEvents.)\r\n            });\r\n\r\n            let playingNamespace = this.socketIo.of(FrameworkSocketNamespaces.PLAY);\r\n            playingNamespace.on('connection', function (socket) {\r\n                let id: string = socket.id.toString().replace(FrameworkSocketNamespaces.PLAY, '');\r\n                console.log(FrameworkSocketNamespaces.PLAY + ' -> someone connected: ' + id);\r\n\r\n                socket.on(FrameworkSocketEvents.joinRoom, (room) => {\r\n                    socket.join(room);\r\n                    // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);\r\n                    socket.emit(FrameworkSocketEvents.joinedRoom, room);\r\n\r\n                    console.log(\"on join room. room nickname: \" + room);\r\n\r\n                    socket.on('disconnect', function () {\r\n                        // connectCounter--;\r\n                        // console.log('a user left. users connected: ' + connectCounter);\r\n\r\n                        console.log(\"a iesit de pe canalul pacii: \" + socket.id);\r\n\r\n                        socket.to(room).emit(FrameworkSocketEvents.leftRoom, socket.id);\r\n                        socket.disconnect();\r\n                    });\r\n                });\r\n\r\n                // socket.on(FrameworkSocketEvents.joinRoom, (room, id) => {\r\n                //     socket.join(room);\r\n                //     // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);\r\n                //     socket.emit(FrameworkSocketEvents.joinedRoom, room, id);\r\n                //\r\n                //     console.log(\"on join room. room nickname: \" + room);\r\n                // });\r\n\r\n                socket.on(FrameworkSocketEvents.privateMessage, (room, messageType, messageData) => {\r\n                    if(messageType == FrameworkSocketMessages.HELLO)\r\n                        console.log(\"se face helloul\");\r\n                    /*socket.join(room);\r\n                    // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);*/\r\n                    socket.broadcast.to(room).emit(FrameworkSocketEvents.privateMessage, messageType, messageData);\r\n                    // console.log(\"private message sent: \" + messageType, messageData);\r\n                });\r\n\r\n                socket.on(FrameworkSocketEvents.disconnectMySocket, (room) => {\r\n                    /*socket.join(room);\r\n                    // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);*/\r\n                    console.log(\"cineva intra in main menu: \" + playingNamespace);\r\n                    // socket.on('disconnect', function() {\r\n                    /*socket.to(room).emit(FrameworkSocketEvents.leftRoom, socket.id);\r\n\r\n                    let users = playingNamespace.clients(room);\r\n\r\n                    for(let i = 0; i < users.length; i++) {\r\n                        playingNamespace.sockets.socket(users[i]).leave(room);\r\n                    }*/\r\n\r\n                    // let clients = io.of('/chat').clients('room');\r\n\r\n                    // socket.rooms.forEach((room) => {\r\n                    //     playingNamespace.in(room).leave(room);\r\n                    // });\r\n\r\n                    // });\r\n\r\n                    // socket.leave(room);\r\n                    // console.log(\"private message sent: \" + messageType, messageData);\r\n\r\n                });\r\n\r\n                // socket.on('room-leave', (room) => {\r\n                //     /*socket.join(room);\r\n                //     // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);*/\r\n                //     console.log(\"m-o scos opponentu fmm\");\r\n                //     socket.leave(room);\r\n                //     // console.log(\"private message sent: \" + messageType, messageData);\r\n                //\r\n                // });\r\n\r\n\r\n                // socket.emit(FrameworkSocketEvents.)\r\n            });\r\n            //-------------------------------------------------\r\n\r\n            /*let sleepNamespace = socketIO()\r\n                .of(\"/\" + FrameworkSocketNamespaces.SEARCH)\r\n                .on(\"connection\", function (socket) {\r\n                    console.log(\"salam\");\r\n\r\n                  /!*  socket.on(FrameworkSocketEvents.onNewConnection, () => {\r\n\r\n                    })*!/\r\n                    // socket.emit('a message', {\r\n                    //     that: 'only'\r\n                    //     , '/chat': 'will get'\r\n                    // });\r\n                    // chat.emit('a message', {\r\n                    //     everyone: 'in'\r\n                    //     , '/chat': 'will get'\r\n                    // });\r\n                });*/\r\n\r\n            // this.socketIo = socketIO();\r\n            // this.socketIo.serveClient(true); // the server will serve the client js file\r\n            // this.socketIo.attach(this.httpServer);\r\n\r\n// listen for a connection\r\n            /* this.socketIo.on('connection', (socket) => {\r\n\r\n                 console.log('User ' + socket.id + ' connected');\r\n                /!* socket.emit(FrameworkSocketChannels.newConnectionChannel, socket.id);\r\n                 // socket.broadcast.emit(FrameworkSocketChannels.lookingForPartnerChannel, [\"New ID: \", socket.id]);\r\n\r\n                 socket.on(FrameworkSocketChannels.lookingForPartnerChannel, (id) => {\r\n                     console.log(FrameworkSocketChannels.lookingForPartnerChannel + \" -> \" + id);\r\n\r\n                     socket.broadcast.emit(FrameworkSocketChannels.lookingForPartnerChannel, id);\r\n                 });\r\n\r\n                 socket.on(FrameworkSocketChannels.letsConnectChannel, (id) => {\r\n                     console.log(FrameworkSocketChannels.letsConnectChannel + \" -> \" + id);\r\n\r\n                     socket.broadcast.emit(FrameworkSocketChannels.letsConnectChannel, id);\r\n                 });\r\n\r\n                 socket.on(FrameworkSocketChannels.partnerFoundChannel, (clientId, id, connectionID) => {\r\n                     console.log(FrameworkSocketChannels.partnerFoundChannel + \" -> \" + id);\r\n\r\n                     socket.broadcast.emit(FrameworkSocketChannels.partnerFoundChannel, clientId, id, connectionID);\r\n\r\n                     socket.on(connectionID, (message) =>\r\n                     {\r\n                         socket.broadcast.emit(connectionID, message);\r\n                         console.log(\"intra la custom\");\r\n\r\n                     });\r\n                 });*!/\r\n             });*/\r\n\r\n\r\n        }\r\n\r\n        private updateUserDb(socket, data): void {\r\n            let sqlText: string = \"UPDATE pockey_table SET \" + data[\"column\"] + \"='\" + data[\"value\"] + \"' WHERE user_id='\" + data[\"userID\"] + \"'\";\r\n            console.log(\"sqlText: \" + sqlText);\r\n\r\n            (async () => {\r\n                const client = await this.databasePool.connect();\r\n                try {\r\n                    const res = await client.query(sqlText);\r\n                    // console.log(\"acum se face\");\r\n                    socket.emit(FrameworkSocketEvents.updateUserData);\r\n                    // console.log(res.rows[0]);\r\n\r\n\r\n                } finally {\r\n                    client.release();\r\n                    console.log(\"client\");\r\n                }\r\n            })().catch(e => console.log(e.stack))\r\n\r\n            /*const query = {\r\n                // give the query a unique nickname\r\n                nickname: 'update-user',\r\n                text: sqlText\r\n            };\r\n\r\n            this.databasePool.query(query)\r\n                /!*.then(res => {\r\n                    console.log(\"user updated: \" + res.rows[0]);\r\n                })\r\n                .catch(e => {\r\n                    console.error(e.stack)\r\n                })*!/*/\r\n        }\r\n\r\n        private checkForUserID(socket, username): void {\r\n            console.log(\"checking db for user_id: \" + username);\r\n            const query = {\r\n                // give the query a unique nickname\r\n                name: 'fetch-user',\r\n                text: 'SELECT * FROM pockey_table WHERE USER_ID = $1',\r\n                values: [username]\r\n            };\r\n\r\n            this.databasePool.query(query)\r\n                .then(res => {\r\n                    console.log(\"user retrieved: \" + res.rows[0]);\r\n\r\n                    if (res.rows[0] == undefined || res.rows[0] == \"undefined\" || res.rows[0] == null) {\r\n                        this.createNewUser(socket, username);\r\n                    }\r\n                    else {\r\n                        socket.emit(FrameworkSocketEvents.getUserFromDatabase, res.rows[0]);\r\n                    }\r\n                    // console.log(res.rows[0]); // ['Brian', 'Carlson']\r\n\r\n\r\n                })\r\n                .catch(e => {\r\n                    // console.log(\"intra la error\");\r\n                    /* mysqli_query($con, \"INSERT INTO proteste_table (email, rated, poza\".$image.\") VALUES ('\" . $email . \"', '\" . $image . \"', '\" . $rating . \"')\");*/\r\n                    console.error(e.stack)\r\n                })\r\n        }\r\n\r\n        private createNewUser(socket, username): void {\r\n            console.log(\"creating new user: \" + username);\r\n            const createNewUserQuery =\r\n                {\r\n                    name: 'create-new-user',\r\n                    text: 'INSERT INTO pockey_table(user_id) VALUES($1)',\r\n                    values: [username]\r\n                };\r\n\r\n            this.databasePool.query(createNewUserQuery)\r\n                .then(res => {\r\n                    /* console.log(\"new user created. user saved into db\");\r\n                     this.socketIo.emit(FrameworkSocketEvents.getUserFromDatabase, res.rows[0]);*/\r\n                    this.checkForUserID(socket, username);\r\n                })\r\n                .catch(e => {\r\n                    console.error(e.stack)\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nnew PockeyServer.Server();\r\n// new Framework.EntryPoint.ConnectionModule;\r\n"]}